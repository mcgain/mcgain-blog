<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruminations and Ramblings]]></title>
  <link href="http://richardmcgain.com/atom.xml" rel="self"/>
  <link href="http://richardmcgain.com/"/>
  <updated>2013-02-11T21:40:39-05:00</updated>
  <id>http://richardmcgain.com/</id>
  <author>
    <name><![CDATA[Richard McGain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Review: Practical Object-Oriented Design in Ruby: An Agile Primer]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/book-review-practical-object-oriented-design-in-ruby-an-agile-primer/"/>
    <updated>2013-02-10T21:08:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/book-review-practical-object-oriented-design-in-ruby-an-agile-primer</id>
    <content type="html"><![CDATA[<p> <a href="http://www.amazon.com/The-Well-Grounded-Rubyist-David-Black/dp/1933988657?SubscriptionId=AKIAJTTBF5UI3YRR3DKQ&tag=richardmcgain-20&linkCode=xm2&camp=2025&creative=165953&creativeASIN=1933988657">The Well-Grounded Rubyist</a>
Although I am fairly well acquainted with the principles of Object-Oriented Design(OOD), I still yearn for a book on the subject that is great for beginner and intermediate developers, a book that is considered the final word in Object-Oriented Design. <!-- more --> Such a book should be:</p>

<ul>
<li>Definitive - The book should cover a wide variety of topics.</li>
<li>Deep - As well as covering a wide variety of subjects, a shallow treatment is just not good enough.</li>
<li>Prescriptive - The book should have practical rules to follow.</li>
<li>Easy to read - Some books introduce revolutionary ideas, but are hard to get through. I would classify Domain Driven Design by Eric Evans as not easy to read, conversely Test Driven Development: By Example is a great read.</li>
<li>Reasoned - It should provide insight into the author&#8217;s reasoning, Code Complete by Steve McConnel is a great example of this.</li>
<li>Have examples - There are many design books out there that don&#8217;t have any code. These books can be helpful, but applying the advice within can be difficult.</li>
</ul>


<p>Practical Object-Oriented Design in Ruby(POODR) by Sandi Metz is not that book. It does however, come closer than most other books on the subject.</p>

<p>A quick look at the table of contents confirms it covers the important bits:</p>

<ol>
<li>Object-Oriented Design</li>
<li>Designing Classes with a Single Responsibility</li>
<li>Managing Dependencies</li>
<li>Creating Flexible Interfaces</li>
<li>Reducing Costs with Duck Typing</li>
<li>Acquiring Behavior Through Inheritance</li>
<li>Sharing Role Behavior with Modules</li>
<li>Combining Objects with Composition</li>
<li>Designing Cost-Effective Tests</li>
</ol>


<p>Do these bits live up to the ideals I outlined above?</p>

<p>The first chapter gives a general overview of OOD, but as pointed out by Metz in the &#8220;How to Read This Book&#8221;, people with experience can skip this chapter. I advise you to take her advice, as it is the weakest of the set. In general though, each chapter in the book is better than the last. The chapter on Managing Dependencies has similar problems to other books covering the subject in that it advises people to inject dependencies, but does not adequately discuss the effects on the injecting classes. If a class has all it&#8217;s dependencies injected, then it is the calling classes responsibility to know about those dependencies. This is not always optimal and POODR does not properly discuss this issue and the solutions to it.</p>

<p>The next few chapters do their subjects justice and, thanks to Metz&#8217;s casual and engaging writing style, have the best argument against prolific inheritance I have ever read. This is why I consider POODR to be an excellent generic OOD book, it takes all the books, blogs and arguments that have been published and summarises them perfectly.</p>

<p>A special mention must be made of chapter 9. Again, the summary of the Chicago verses London schools of testing (for those not familiar with the terms, these are the mockist verses non-mockist styles of Test Driven Development) is concisely summarised. The main disadvantage of mockist testing is that the classes being mocked can be changed without the tests failing. Metz introduces a simple solution that blew my mind. This solution may not be new, but it was certainly new to me. This is exactly why I have been looking for the definitive OOD book, because there is a vast amount of knowlege out there and despite my best efforts I haven&#8217;t been able to read it all. POODR is almost a one stop book for OOD, especially for Ruby.</p>

<p>So, should you buy the book? Yes is the easy answer for me. At the moment, it represents the best general OOD book on the market, let alone for Ruby and almost all developers will get something out of the book. If you are disheartened by the first few chapters don&#8217;t worry, you will not be dissapointed by the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shorter exception declarations in Ruby]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/shorter-exception-declarations-in-ruby/"/>
    <updated>2013-02-10T19:31:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/shorter-exception-declarations-in-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://steveklabnik.com/">Steve Klabnik</a> recently wrote a <a href="http://blog.steveklabnik.com/posts/2012-09-09-random-ruby-tricks--class-new">post</a> on Class.new, especially as it relates to a terser syntax for declaring Exception classes.</p>

<p>I use an even terser, albeit more magical syntax.</p>

<!-- more -->


<p>This is a bit of code that creates a class in ruby, you can find it all over the internet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_class</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">superclass</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="n">superclass</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">const_set</span> <span class="n">class_name</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very cool, but I use this only for creating exception classes and so prefer something a bit more explicit. Luckily it is trivial to get what I want from this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">new_exception</span><span class="p">(</span><span class="n">exception_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="no">Exception</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">const_set</span> <span class="n">exception_name</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_exception</span> <span class="s2">&quot;CannotFindPants&quot;</span>
</span><span class='line'><span class="n">new_exception</span> <span class="ss">:FlobbetsAreFlumoxed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viola!</p>

<p>If you wanted to go further, you could modify the code to take multiple arguments, loop through them to create the classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comments]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/comments/"/>
    <updated>2013-02-10T18:56:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/comments</id>
    <content type="html"><![CDATA[<p>Like most people, I learnt in university that commenting is essential, every method needed a big block of comments explaining each parameter, what the method does and what is returned. Inside a method, complicated lines needed comments to explain what they did etc.</p>

<p>Fast forward a few years where I am one of 50 developers working on a legacy codebase with 3.5 million lines of code built up over 10 years. I often got asked by newcomers why there were few to no comments in the codebase. My opinion had changed dramatically in just a few short years. I now agreed with others in my company that code comments were unmaintainable. In our experience, existing comments were never updated by the next developer, making them inaccurate at best and dangerous at worst.</p>

<!-- more -->


<p>I embraced the mantra espoused by many code quality books (such as <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=020161622X&linkCode=as2&tag=richardmcgain-20">The Pragmatic Programmer: From Journeyman to Master</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
, <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=richardmcgain-20">Clean Code: A Handbook of Agile Software Craftsmanship</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=0132350882" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> and <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=richardmcgain-20">Refactoring: Improving the Design of Existing Code</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=0201485672" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />) and did an extract method refactoring on the code that the comment referred to, allowing me to remove the comment. I was fairly dogmatic about this as our codebase was heavily littered with comments. Of course there are exceptions to this rule, there are hacks, gotchas and other nasty things that creep into even the best maintained code that should be documented. In this case, at least the comments point out other code smells.</p>

<p>So, I was working happily away on our codebase, refactoring constantly while working on new features. Sometimes though, moving to a better design takes time and many different steps. Some improvements I worked on in piecemeal over many months before arriving at a more elegant (and easier to maintain) design. In intermediate stages, it is not always obvious what the final plan is to other developers. When multiple people are working on the same code, they might try to refactor in the opposite direction, or undo the changes you just made. Re-enter the comment. At the top of files currently being refactored long term, I put quite a large comment explaining the changes I want to make. It is also important to note my motivations in the comment.</p>

<p>The practical applications of doing this is that every so often, someone will come to chat about my plans. Instead of people working against each other, we can figure out the best approach to take together.</p>

<p>It has been quite a journey for me, and I think my technique falls nicely between the two extremes.</p>
]]></content>
  </entry>
  
</feed>
