<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruminations and Ramblings]]></title>
  <link href="http://richardmcgain.com/atom.xml" rel="self"/>
  <link href="http://richardmcgain.com/"/>
  <updated>2013-08-26T13:00:34-04:00</updated>
  <id>http://richardmcgain.com/</id>
  <author>
    <name><![CDATA[Richard McGain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Review: Confident Ruby by Avdi Grimm]]></title>
    <link href="http://richardmcgain.com/blog/2013/08/26/book-review-confident-ruby-by-avdi-grimm/"/>
    <updated>2013-08-26T12:36:00-04:00</updated>
    <id>http://richardmcgain.com/blog/2013/08/26/book-review-confident-ruby-by-avdi-grimm</id>
    <content type="html"><![CDATA[<p>Sometimes, the metaphors of and the analogies to, the act of programming are as important and insightful as any technical tip. Many books concern themselves with only these stories, best among them <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=richardmcgain-20">The Pragmatic Programmer</a> and <a href="http://www.amazon.com/gp/product/097451408X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=097451408X&amp;linkCode=as2&amp;tag=richardmcgain-20">Practices of an Agile Developer</a>. Although <a href="http://devblog.avdi.org/2013/08/26/confident-ruby-is-finished/">Confident Ruby</a> is not one of these books, Avdi Grimm opens with a particularly nice one. He compares reading code and reading a choose your own adventure novel, arguing that many methods read like one of these branching story novels, read from front to back, instead of following the correct route. It is the power of these stories that sometimes illuminate a problem far better than just looking at some messy code and this one nicely illustrates the problem Grimm tackles in his book.</p>

<p>Grimm&#8217;s point then, is that code should read like a narrative. The rest of the book is dedicated to techniques to make code flow better.</p>

<p>This is not a new idea, the single level of abstraction rule has this goal and it has been discussed at length <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=richardmcgain-20">Clean Code</a> but Grimm tackes this problem with practical, in-depth examples, something has other books often avoid. The book does give you high level strategies for achieving flow, but also practical examples on how to implement them.</p>

<p>Grimm&#8217;s main strategy to making methods flow, is to separate out the acts of collecting input, performing work, delivering output and handling failures. Once this is done, different techniques are used on the different areas of the method, and so the main portion of the book is split into sections covering these acts.</p>

<p>A good insight into the type of techniques that are discussed in the book is that implementing the various to_a, to_s conversion functions gives code a huge amount of flexibility. File.open for example, calls to_path and to_s on its argument so you don&#8217;t just have to pass in a string, but anything that responds to to_s. I can easily imagine adding extra information to a Filename class, but being able to pass it directly into File.open without worrying about passing a different type. Grimm recommends that we should all be accepting input in this way so that unforeseen uses of our code is easier. This is typical of the examples in the book, an easy tip to implementm but backed by some deep thinking.</p>

<p>Some tips along similar lines peppered across the internet bring up some very obscure ruby internals. RubyTapas are a prime example here. Although Grimm clearly doesn&#8217;t intend many of the weird and wonderful code he presents to be used, I thought there might be a danger of some of this obscurity seeping into the book.
Happily, all the examples in the final product are fine, even if the user has never seen the technique before. Using the block form of fetch for example:</p>

<pre><code>args = {a: 1, b: 2}
args.fetch(:c) { 3 }
</code></pre>

<p>Even if you have never seen this pattern before, I can think of only two things it could be doing, some kind of processing on the value, or a default value. Inspecting the block makes it pretty obvious that it is the latter.</p>

<p>I like the informal tone used throughout, it helps to convey that this is one developer (Avdi Grimm) conveying his personal tips and tricks. I prefer this style to more prescriptive books as it is a helpful reminder that this is only one person&#8217;s opinion and not the one true way of programming like many books like to preach.</p>

<p>So, should you buy the book? Yes. Most ruby developers will find something useful in here, especially intermediate developers. Although this book is not designed for beginners, it is probably still worth a read through, as the code is not difficult to understand.</p>

<p><a href="http://devblog.avdi.org/2013/08/26/confident-ruby-is-finished/">Confident Ruby is available now</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Vim with Ruby]]></title>
    <link href="http://richardmcgain.com/blog/2013/03/25/compiling-vim-with-ruby/"/>
    <updated>2013-03-25T10:42:00-04:00</updated>
    <id>http://richardmcgain.com/blog/2013/03/25/compiling-vim-with-ruby</id>
    <content type="html"><![CDATA[<p>A very quick one to document the vim configuration I use</p>

<p>./configure &#8211;with-features=HUGE &#8211;enable-multibyte=yes &#8211;enable-cscope=yes &#8211;enable-fontset &#8211;enable-rubyinterp &#8211;with-ruby-command=/home/mcgain/.rvm/rubies/ruby-1.9.3-p286/bin/ruby</p>

<p>I did hit a stumbling block with my &#8211;with-ruby-command=. This needed to be last, as it was slurping up any arguments after it, causing the ruby version check to fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Practical Object-Oriented Design in Ruby: An Agile Primer]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/book-review-practical-object-oriented-design-in-ruby-an-agile-primer/"/>
    <updated>2013-02-10T21:08:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/book-review-practical-object-oriented-design-in-ruby-an-agile-primer</id>
    <content type="html"><![CDATA[<p>Although I am fairly well acquainted with the principles of Object-Oriented Design(OOD), I still yearn for a book on the subject that is great for beginner and intermediate developers, a book that is considered the final word in Object-Oriented Design. <!-- more --> Such a book should be:</p>

<ul>
<li>Definitive - The book should cover a wide variety of topics.</li>
<li>Deep - As well as covering a wide variety of subjects, a shallow treatment is just not good enough.</li>
<li>Prescriptive - The book should have practical rules to follow.</li>
<li>Easy to read - Some books introduce revolutionary ideas, but are hard to get through. I would classify 0321125215 as not easy to read, conversely 0321146530 is a great read.</li>
<li>Reasoned - It should provide insight into the author&#8217;s reasoning, 0735619670 is a great example of this.</li>
<li>Have examples - There are many design books out there that don&#8217;t have any code. These books can be helpful, but applying the advice within can be difficult.</li>
</ul>


<p>0321721330(POODR) by Sandi Metz is not that book. It does however, come closer than most other books on the subject.</p>

<p>A quick look at the table of contents confirms it covers the important bits:</p>

<ol>
<li>Object-Oriented Design</li>
<li>Designing Classes with a Single Responsibility</li>
<li>Managing Dependencies</li>
<li>Creating Flexible Interfaces</li>
<li>Reducing Costs with Duck Typing</li>
<li>Acquiring Behavior Through Inheritance</li>
<li>Sharing Role Behavior with Modules</li>
<li>Combining Objects with Composition</li>
<li>Designing Cost-Effective Tests</li>
</ol>


<p>Do these bits live up to the ideals I outlined above?</p>

<p>The first chapter gives a general overview of OOD, but as pointed out by Metz in the &#8220;How to Read This Book&#8221;, people with experience can skip this chapter. I advise you to take her advice, as it is the weakest of the set. In general though, each chapter in the book is better than the last. The chapter on Managing Dependencies has similar problems to other books covering the subject in that it advises people to inject dependencies, but does not adequately discuss the effects on the injecting classes. If a class has all its dependencies injected, then it is the calling classes responsibility to know about those dependencies. This is not always optimal and POODR does not properly discuss this issue and the solutions to it.</p>

<p>The next few chapters do their subjects justice and, thanks to Metz&#8217;s casual and engaging writing style, have the best argument against prolific inheritance I have ever read. This is why I consider POODR to be an excellent generic OOD book, it takes all the books, blogs and arguments that have been published and summarises them perfectly. While the treatement is not deep, I don&#8217;t think much more needs to be said about inheritance than is mentioned in POODR.</p>

<p>Each chapter is well reasoned, there were a few points when reading the book that the code was not particularly well designed, only to read a paragraph later that this is deliberate in order to demonstrate a point. By using tricks like this, Metz gives good insights into her design process and the reasoning behind her designs.</p>

<p>A special mention must be made of chapter 9. Again, the summary of the Chicago verses London schools of testing (for those not familiar with the terms, these are the mockist verses non-mockist styles of Test Driven Development) is concisely summarised. The main disadvantage of mockist testing is that the classes being mocked can be changed without the tests failing. Metz introduces a simple solution that blew my mind. This solution may not be new, but it was certainly new to me. This is exactly why I have been looking for the definitive OOD book, because there is a vast amount of knowlege out there and despite my best efforts I haven&#8217;t been able to read it all. POODR is almost a one stop book for OOD, especially for Ruby.</p>

<p>Back to my ideal OOD book, POODR is an entertaining and easy read, it fully lives up to that requirement. It is not definitive, despite covering a good variety of subjects, there are gaps in the material. Metz&#8217;s examples are perhaps too repeditive for me, but I won&#8217;t hold that against the book. It is prescriptive, giving specific tips and rules. Despite wanting depth in my perfect OOD book, I didn&#8217;t find myself needing more explanation in this book, as the concepts were explained so concisely.</p>

<p>So, should you buy the book? Yes is the easy answer for me. At the moment, it represents the best general OOD book on the market, let alone for Ruby and almost all developers will get something out of the book. If you are disheartened by the first few chapters don&#8217;t worry, you will not be dissapointed by the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shorter exception declarations in Ruby]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/shorter-exception-declarations-in-ruby/"/>
    <updated>2013-02-10T19:31:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/shorter-exception-declarations-in-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://steveklabnik.com/">Steve Klabnik</a> recently wrote a <a href="http://blog.steveklabnik.com/posts/2012-09-09-random-ruby-tricks--class-new">post</a> on Class.new, especially as it relates to a terser syntax for declaring Exception classes.</p>

<p>I use an even terser, albeit more magical syntax.</p>

<!-- more -->


<p>This is a bit of code that creates a class in ruby, you can find it all over the internet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_class</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">superclass</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="n">superclass</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">const_set</span> <span class="n">class_name</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very cool, but I use this only for creating exception classes and so prefer something a bit more explicit. Luckily it is trivial to get what I want from this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">new_exception</span><span class="p">(</span><span class="n">exception_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="no">Exception</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">const_set</span> <span class="n">exception_name</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_exception</span> <span class="s2">&quot;CannotFindPants&quot;</span>
</span><span class='line'><span class="n">new_exception</span> <span class="ss">:FlobbetsAreFlumoxed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viola!</p>

<p>If you wanted to go further, you could modify the code to take multiple arguments, loop through them to create the classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comments]]></title>
    <link href="http://richardmcgain.com/blog/2013/02/10/comments/"/>
    <updated>2013-02-10T18:56:00-05:00</updated>
    <id>http://richardmcgain.com/blog/2013/02/10/comments</id>
    <content type="html"><![CDATA[<p>Like most people, I learnt in university that commenting is essential, every method needed a big block of comments explaining each parameter, what the method does and what is returned. Inside a method, complicated lines needed comments to explain what they did etc.</p>

<p>Fast forward a few years where I am one of 50 developers working on a legacy codebase with 3.5 million lines of code built up over 10 years. I often got asked by newcomers why there were few to no comments in the codebase. My opinion had changed dramatically in just a few short years. I now agreed with others in my company that code comments were unmaintainable. In our experience, existing comments were never updated by the next developer, making them inaccurate at best and dangerous at worst.</p>

<!-- more -->


<p>I embraced the mantra espoused by many code quality books (such as <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=020161622X&linkCode=as2&tag=richardmcgain-20">The Pragmatic Programmer: From Journeyman to Master</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
, <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=richardmcgain-20">Clean Code: A Handbook of Agile Software Craftsmanship</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=0132350882" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> and <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=richardmcgain-20">Refactoring: Improving the Design of Existing Code</a><img src="http://www.assoc-amazon.com/e/ir?t=richardmcgain-20&l=as2&o=1&a=0201485672" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />) and did an extract method refactoring on the code that the comment referred to, allowing me to remove the comment. I was fairly dogmatic about this as our codebase was heavily littered with comments. Of course there are exceptions to this rule, there are hacks, gotchas and other nasty things that creep into even the best maintained code that should be documented. In this case, at least the comments point out other code smells.</p>

<p>So, I was working happily away on our codebase, refactoring constantly while working on new features. Sometimes though, moving to a better design takes time and many different steps. Some improvements I worked on in piecemeal over many months before arriving at a more elegant (and easier to maintain) design. In intermediate stages, it is not always obvious what the final plan is to other developers. When multiple people are working on the same code, they might try to refactor in the opposite direction, or undo the changes you just made. Re-enter the comment. At the top of files currently being refactored long term, I put quite a large comment explaining the changes I want to make. It is also important to note my motivations in the comment.</p>

<p>The practical applications of doing this is that every so often, someone will come to chat about my plans. Instead of people working against each other, we can figure out the best approach to take together.</p>

<p>It has been quite a journey for me, and I think my technique falls nicely between the two extremes.</p>
]]></content>
  </entry>
  
</feed>
